Index: hostapd-2022-05-08-b859b9bc/hostapd/config_file.c
===================================================================
--- hostapd-2022-05-08-b859b9bc.orig/hostapd/config_file.c
+++ hostapd-2022-05-08-b859b9bc/hostapd/config_file.c
@@ -2310,6 +2310,7 @@ static int hostapd_config_fill(struct ho
 	if (os_strcmp(buf, "interface") == 0) {
 		os_strlcpy(conf->bss[0]->iface, pos,
 			   sizeof(conf->bss[0]->iface));
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "bridge") == 0) {
 		os_strlcpy(bss->bridge, pos, sizeof(bss->bridge));
 		if (!bss->wds_bridge[0])
@@ -2337,9 +2338,11 @@ static int hostapd_config_fill(struct ho
 			return 1;
 		}
 		conf->driver = driver;
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "driver_params") == 0) {
 		os_free(conf->driver_params);
 		conf->driver_params = os_strdup(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "debug") == 0) {
 		wpa_printf(MSG_DEBUG, "Line %d: DEPRECATED: 'debug' configuration variable is not used anymore",
 			   line);
@@ -2429,12 +2432,16 @@ static int hostapd_config_fill(struct ho
 			return 1;
 		}
 		os_memcpy(conf->country, pos, 2);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "country3") == 0) {
 		conf->country[2] = strtol(pos, NULL, 16);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "ieee80211d") == 0) {
 		conf->ieee80211d = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "ieee80211h") == 0) {
 		conf->ieee80211h = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "ieee8021x") == 0) {
 		bss->ieee802_1x = atoi(pos);
 	} else if (os_strcmp(buf, "eapol_version") == 0) {
@@ -2846,7 +2853,8 @@ static int hostapd_config_fill(struct ho
 			wpa_printf(MSG_ERROR, "Line %d: Invalid max_num_sta=%d; allowed range 0..%d",
 				   line, conf->max_num_sta, MAX_STA_COUNT);
 			return 1;
-		}
+		} else
+			conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "wpa") == 0) {
 		bss->wpa = atoi(pos);
 	} else if (os_strcmp(buf, "extended_key_id") == 0) {
@@ -3114,6 +3122,7 @@ static int hostapd_config_fill(struct ho
 			return 1;
 		}
 		conf->hw_mode_set = true;
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "wps_rf_bands") == 0) {
 		if (os_strcmp(pos, "ad") == 0)
 			bss->wps_rf_bands = WPS_RF_60GHZ;
@@ -3133,10 +3142,13 @@ static int hostapd_config_fill(struct ho
 		}
 	} else if (os_strcmp(buf, "acs_exclude_dfs") == 0) {
 		conf->acs_exclude_dfs = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "radio_config_id") == 0) {
 			conf->config_id = os_strdup(pos);
+			conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "op_class") == 0) {
 		conf->op_class = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "channel") == 0) {
 		if (os_strcmp(pos, "acs_survey") == 0) {
 #ifndef CONFIG_ACS
@@ -3146,21 +3158,26 @@ static int hostapd_config_fill(struct ho
 #else /* CONFIG_ACS */
 			conf->acs = 1;
 			conf->channel = 0;
+			conf->conf_changed = 1;
 #endif /* CONFIG_ACS */
 		} else {
 			conf->channel = atoi(pos);
 			conf->acs = conf->channel == 0;
+			conf->conf_changed = 1;
 		}
 	} else if (os_strcmp(buf, "edmg_channel") == 0) {
 		conf->edmg_channel = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "enable_edmg") == 0) {
 		conf->enable_edmg = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "chanlist") == 0) {
 		if (hostapd_parse_chanlist(conf, pos)) {
 			wpa_printf(MSG_ERROR, "Line %d: invalid channel list",
 				   line);
 			return 1;
 		}
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "freqlist") == 0) {
 		if (freq_range_list_parse(&conf->acs_freq_list, pos)) {
 			wpa_printf(MSG_ERROR, "Line %d: invalid frequency list",
@@ -3168,10 +3185,13 @@ static int hostapd_config_fill(struct ho
 			return 1;
 		}
 		conf->acs_freq_list_present = 1;
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "acs_exclude_6ghz_non_psc") == 0) {
 		conf->acs_exclude_6ghz_non_psc = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "enable_background_radar") == 0) {
 		conf->enable_background_radar = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "min_tx_power") == 0) {
 		int val = atoi(pos);
 
@@ -3182,6 +3202,7 @@ static int hostapd_config_fill(struct ho
 			return 1;
 		}
 		conf->min_tx_power = val;
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "beacon_int") == 0) {
 		int val = atoi(pos);
 		/* MIB defines range as 1..65535, but very small values
@@ -3196,6 +3217,7 @@ static int hostapd_config_fill(struct ho
 			return 1;
 		}
 		conf->beacon_int = val;
+		conf->conf_changed = 1;
 #ifdef CONFIG_ACS
 	} else if (os_strcmp(buf, "acs_num_scans") == 0) {
 		int val = atoi(pos);
@@ -3205,12 +3227,14 @@ static int hostapd_config_fill(struct ho
 			return 1;
 		}
 		conf->acs_num_scans = val;
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "acs_chan_bias") == 0) {
 		if (hostapd_config_parse_acs_chan_bias(conf, pos)) {
 			wpa_printf(MSG_ERROR, "Line %d: invalid acs_chan_bias",
 				   line);
 			return -1;
 		}
+		conf->conf_changed = 1;
 #endif /* CONFIG_ACS */
 	} else if (os_strcmp(buf, "dtim_period") == 0) {
 		int val = atoi(pos);
@@ -3249,6 +3273,7 @@ static int hostapd_config_fill(struct ho
 				   line, conf->rts_threshold);
 			return 1;
 		}
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "fragm_threshold") == 0) {
 		conf->fragm_threshold = atoi(pos);
 		if (conf->fragm_threshold == -1) {
@@ -3260,6 +3285,7 @@ static int hostapd_config_fill(struct ho
 				   line, conf->fragm_threshold);
 			return 1;
 		}
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "send_probe_response") == 0) {
 		int val = atoi(pos);
 		if (val != 0 && val != 1) {
@@ -3274,12 +3300,14 @@ static int hostapd_config_fill(struct ho
 				   line);
 			return 1;
 		}
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "basic_rates") == 0) {
 		if (hostapd_parse_intlist(&conf->basic_rates, pos)) {
 			wpa_printf(MSG_ERROR, "Line %d: invalid rate list",
 				   line);
 			return 1;
 		}
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "beacon_rate") == 0) {
 		int val;
 
@@ -3293,6 +3321,7 @@ static int hostapd_config_fill(struct ho
 			}
 			conf->rate_type = BEACON_RATE_HT;
 			conf->beacon_rate = val;
+			conf->conf_changed = 1;
 		} else if (os_strncmp(pos, "vht:", 4) == 0) {
 			val = atoi(pos + 4);
 			if (val < 0 || val > 9) {
@@ -3303,6 +3332,7 @@ static int hostapd_config_fill(struct ho
 			}
 			conf->rate_type = BEACON_RATE_VHT;
 			conf->beacon_rate = val;
+			conf->conf_changed = 1;
 		} else if (os_strncmp(pos, "he:", 3) == 0) {
 			val = atoi(pos + 3);
 			if (val < 0 || val > 11) {
@@ -3313,6 +3343,7 @@ static int hostapd_config_fill(struct ho
 			}
 			conf->rate_type = BEACON_RATE_HE;
 			conf->beacon_rate = val;
+			conf->conf_changed = 1;
 		} else {
 			val = atoi(pos);
 			if (val < 10 || val > 10000) {
@@ -3323,12 +3354,14 @@ static int hostapd_config_fill(struct ho
 			}
 			conf->rate_type = BEACON_RATE_LEGACY;
 			conf->beacon_rate = val;
+			conf->conf_changed = 1;
 		}
 	} else if (os_strcmp(buf, "preamble") == 0) {
 		if (atoi(pos))
 			conf->preamble = SHORT_PREAMBLE;
 		else
 			conf->preamble = LONG_PREAMBLE;
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "ignore_broadcast_ssid") == 0) {
 		bss->ignore_broadcast_ssid = atoi(pos);
 	} else if (os_strcmp(buf, "no_probe_resp_if_max_sta") == 0) {
@@ -3383,14 +3416,17 @@ static int hostapd_config_fill(struct ho
 #endif /* CONFIG_NO_VLAN */
 	} else if (os_strcmp(buf, "ap_table_max_size") == 0) {
 		conf->ap_table_max_size = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "ap_table_expiration_time") == 0) {
 		conf->ap_table_expiration_time = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strncmp(buf, "tx_queue_", 9) == 0) {
 		if (hostapd_config_tx_queue(conf->tx_queue, buf, pos)) {
 			wpa_printf(MSG_ERROR, "Line %d: invalid TX queue item",
 				   line);
 			return 1;
 		}
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "wme_enabled") == 0 ||
 		   os_strcmp(buf, "wmm_enabled") == 0) {
 		bss->wmm_enabled = atoi(pos);
@@ -3409,6 +3445,7 @@ static int hostapd_config_fill(struct ho
 				   line);
 			return 1;
 		}
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "bssid") == 0) {
 		if (hwaddr_aton(pos, bss->bssid)) {
 			wpa_printf(MSG_ERROR, "Line %d: invalid bssid item",
@@ -3417,6 +3454,7 @@ static int hostapd_config_fill(struct ho
 		}
 	} else if (os_strcmp(buf, "use_driver_iface_addr") == 0) {
 		conf->use_driver_iface_addr = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "ieee80211w") == 0) {
 		bss->ieee80211w = atoi(pos);
 	} else if (os_strcmp(buf, "group_mgmt_cipher") == 0) {
@@ -3457,37 +3495,49 @@ static int hostapd_config_fill(struct ho
 #endif /* CONFIG_OCV */
 	} else if (os_strcmp(buf, "noscan") == 0) {
 		conf->noscan = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "ht_coex") == 0) {
 		conf->no_ht_coex = !atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "ieee80211n") == 0) {
 		conf->ieee80211n = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "ht_capab") == 0) {
 		if (hostapd_config_ht_capab(conf, pos) < 0) {
 			wpa_printf(MSG_ERROR, "Line %d: invalid ht_capab",
 				   line);
 			return 1;
 		}
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "require_ht") == 0) {
 		conf->require_ht = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "obss_interval") == 0) {
 		conf->obss_interval = atoi(pos);
+		conf->conf_changed = 1;
 #ifdef CONFIG_IEEE80211AC
 	} else if (os_strcmp(buf, "ieee80211ac") == 0) {
 		conf->ieee80211ac = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "vht_capab") == 0) {
 		if (hostapd_config_vht_capab(conf, pos) < 0) {
 			wpa_printf(MSG_ERROR, "Line %d: invalid vht_capab",
 				   line);
 			return 1;
 		}
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "require_vht") == 0) {
 		conf->require_vht = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "vht_oper_chwidth") == 0) {
 		conf->vht_oper_chwidth = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "vht_oper_centr_freq_seg0_idx") == 0) {
 		conf->vht_oper_centr_freq_seg0_idx = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "vht_oper_centr_freq_seg1_idx") == 0) {
 		conf->vht_oper_centr_freq_seg1_idx = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "vendor_vht") == 0) {
 		bss->vendor_vht = atoi(pos);
 	} else if (os_strcmp(buf, "use_sta_nsts") == 0) {
@@ -3496,123 +3546,167 @@ static int hostapd_config_fill(struct ho
 #ifdef CONFIG_IEEE80211AX
 	} else if (os_strcmp(buf, "ieee80211ax") == 0) {
 		conf->ieee80211ax = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_su_beamformer") == 0) {
 		conf->he_phy_capab.he_su_beamformer = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_su_beamformee") == 0) {
 		conf->he_phy_capab.he_su_beamformee = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_beamformer") == 0) {
 		conf->he_phy_capab.he_mu_beamformer = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_bss_color") == 0) {
 		conf->he_op.he_bss_color = atoi(pos) & 0x3f;
 		conf->he_op.he_bss_color_disabled = 0;
 		if (atoi(pos) > 63)
 			conf->he_op.he_bss_color = os_random() % 63 + 1;
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_bss_color_partial") == 0) {
 		conf->he_op.he_bss_color_partial = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_default_pe_duration") == 0) {
 		conf->he_op.he_default_pe_duration = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_twt_required") == 0) {
 		conf->he_op.he_twt_required = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_twt_responder") == 0) {
 		conf->he_op.he_twt_responder = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_rts_threshold") == 0) {
 		conf->he_op.he_rts_threshold = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_er_su_disable") == 0) {
 		conf->he_op.he_er_su_disable = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_basic_mcs_nss_set") == 0) {
 		conf->he_op.he_basic_mcs_nss_set = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_qos_info_param_count") == 0) {
 		conf->he_mu_edca.he_qos_info |=
 			set_he_cap(atoi(pos), HE_QOS_INFO_EDCA_PARAM_SET_COUNT);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_qos_info_q_ack") == 0) {
 		conf->he_mu_edca.he_qos_info |=
 			set_he_cap(atoi(pos), HE_QOS_INFO_Q_ACK);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_qos_info_queue_request") == 0) {
 		conf->he_mu_edca.he_qos_info |=
 			set_he_cap(atoi(pos), HE_QOS_INFO_QUEUE_REQUEST);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_qos_info_txop_request") == 0) {
 		conf->he_mu_edca.he_qos_info |=
 			set_he_cap(atoi(pos), HE_QOS_INFO_TXOP_REQUEST);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_be_aifsn") == 0) {
 		conf->he_mu_edca.he_mu_ac_be_param[HE_MU_AC_PARAM_ACI_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_AIFSN);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_be_acm") == 0) {
 		conf->he_mu_edca.he_mu_ac_be_param[HE_MU_AC_PARAM_ACI_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_ACM);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_be_aci") == 0) {
 		conf->he_mu_edca.he_mu_ac_be_param[HE_MU_AC_PARAM_ACI_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_ACI);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_be_ecwmin") == 0) {
 		conf->he_mu_edca.he_mu_ac_be_param[HE_MU_AC_PARAM_ECW_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_ECWMIN);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_be_ecwmax") == 0) {
 		conf->he_mu_edca.he_mu_ac_be_param[HE_MU_AC_PARAM_ECW_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_ECWMAX);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_be_timer") == 0) {
 		conf->he_mu_edca.he_mu_ac_be_param[HE_MU_AC_PARAM_TIMER_IDX] =
 			atoi(pos) & 0xff;
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_bk_aifsn") == 0) {
 		conf->he_mu_edca.he_mu_ac_bk_param[HE_MU_AC_PARAM_ACI_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_AIFSN);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_bk_acm") == 0) {
 		conf->he_mu_edca.he_mu_ac_bk_param[HE_MU_AC_PARAM_ACI_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_ACM);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_bk_aci") == 0) {
 		conf->he_mu_edca.he_mu_ac_bk_param[HE_MU_AC_PARAM_ACI_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_ACI);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_bk_ecwmin") == 0) {
 		conf->he_mu_edca.he_mu_ac_bk_param[HE_MU_AC_PARAM_ECW_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_ECWMIN);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_bk_ecwmax") == 0) {
 		conf->he_mu_edca.he_mu_ac_bk_param[HE_MU_AC_PARAM_ECW_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_ECWMAX);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_bk_timer") == 0) {
 		conf->he_mu_edca.he_mu_ac_bk_param[HE_MU_AC_PARAM_TIMER_IDX] =
 			atoi(pos) & 0xff;
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_vi_aifsn") == 0) {
 		conf->he_mu_edca.he_mu_ac_vi_param[HE_MU_AC_PARAM_ACI_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_AIFSN);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_vi_acm") == 0) {
 		conf->he_mu_edca.he_mu_ac_vi_param[HE_MU_AC_PARAM_ACI_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_ACM);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_vi_aci") == 0) {
 		conf->he_mu_edca.he_mu_ac_vi_param[HE_MU_AC_PARAM_ACI_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_ACI);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_vi_ecwmin") == 0) {
 		conf->he_mu_edca.he_mu_ac_vi_param[HE_MU_AC_PARAM_ECW_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_ECWMIN);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_vi_ecwmax") == 0) {
 		conf->he_mu_edca.he_mu_ac_vi_param[HE_MU_AC_PARAM_ECW_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_ECWMAX);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_vi_timer") == 0) {
 		conf->he_mu_edca.he_mu_ac_vi_param[HE_MU_AC_PARAM_TIMER_IDX] =
 			atoi(pos) & 0xff;
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_vo_aifsn") == 0) {
 		conf->he_mu_edca.he_mu_ac_vo_param[HE_MU_AC_PARAM_ACI_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_AIFSN);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_vo_acm") == 0) {
 		conf->he_mu_edca.he_mu_ac_vo_param[HE_MU_AC_PARAM_ACI_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_ACM);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_vo_aci") == 0) {
 		conf->he_mu_edca.he_mu_ac_vo_param[HE_MU_AC_PARAM_ACI_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_ACI);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_vo_ecwmin") == 0) {
 		conf->he_mu_edca.he_mu_ac_vo_param[HE_MU_AC_PARAM_ECW_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_ECWMIN);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_vo_ecwmax") == 0) {
 		conf->he_mu_edca.he_mu_ac_vo_param[HE_MU_AC_PARAM_ECW_IDX] |=
 			set_he_cap(atoi(pos), HE_MU_AC_PARAM_ECWMAX);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_mu_edca_ac_vo_timer") == 0) {
 		conf->he_mu_edca.he_mu_ac_vo_param[HE_MU_AC_PARAM_TIMER_IDX] =
 			atoi(pos) & 0xff;
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_spr_sr_control") == 0) {
 		conf->spr.sr_control = atoi(pos) & 0x1f;
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_spr_non_srg_obss_pd_max_offset") == 0) {
 		conf->spr.non_srg_obss_pd_max_offset = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_spr_srg_obss_pd_min_offset") == 0) {
 		conf->spr.srg_obss_pd_min_offset = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_spr_srg_obss_pd_max_offset") == 0) {
 		conf->spr.srg_obss_pd_max_offset = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_spr_srg_bss_colors") == 0) {
 		if (hostapd_parse_he_srg_bitmap(
 			conf->spr.srg_bss_color_bitmap, pos)) {
@@ -3621,6 +3715,7 @@ static int hostapd_config_fill(struct ho
 				   line, pos);
 			return 1;
 		}
+			conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_spr_srg_partial_bssid") == 0) {
 		if (hostapd_parse_he_srg_bitmap(
 			conf->spr.srg_partial_bssid_bitmap, pos)) {
@@ -3629,22 +3724,31 @@ static int hostapd_config_fill(struct ho
 				   line, pos);
 			return 1;
 		}
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_6ghz_reg_pwr_type") == 0) {
 		conf->he_6ghz_reg_pwr_type = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_oper_chwidth") == 0) {
 		conf->he_oper_chwidth = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_oper_centr_freq_seg0_idx") == 0) {
 		conf->he_oper_centr_freq_seg0_idx = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_oper_centr_freq_seg1_idx") == 0) {
 		conf->he_oper_centr_freq_seg1_idx = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_6ghz_max_mpdu") == 0) {
 		conf->he_6ghz_max_mpdu = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_6ghz_max_ampdu_len_exp") == 0) {
 		conf->he_6ghz_max_ampdu_len_exp = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_6ghz_rx_ant_pat") == 0) {
 		conf->he_6ghz_rx_ant_pat = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "he_6ghz_tx_ant_pat") == 0) {
 		conf->he_6ghz_tx_ant_pat = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "unsol_bcast_probe_resp_interval") == 0) {
 		int val = atoi(pos);
 
@@ -4183,6 +4287,7 @@ static int hostapd_config_fill(struct ho
 				   line, pos);			\
 			return 1;				\
 		}
+		conf->conf_changed = 1;
 	PARSE_TEST_PROBABILITY(ignore_probe_probability)
 	PARSE_TEST_PROBABILITY(ignore_auth_probability)
 	PARSE_TEST_PROBABILITY(ignore_assoc_probability)
@@ -4190,6 +4295,7 @@ static int hostapd_config_fill(struct ho
 	PARSE_TEST_PROBABILITY(corrupt_gtk_rekey_mic_probability)
 	} else if (os_strcmp(buf, "ecsa_ie_only") == 0) {
 		conf->ecsa_ie_only = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "bss_load_test") == 0) {
 		WPA_PUT_LE16(bss->bss_load_test, atoi(pos));
 		pos = os_strchr(pos, ':');
@@ -4329,8 +4435,10 @@ static int hostapd_config_fill(struct ho
 			return 1;
 		}
 		conf->local_pwr_constraint = val;
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "spectrum_mgmt_required") == 0) {
 		conf->spectrum_mgmt_required = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "wowlan_triggers") == 0) {
 		os_free(bss->wowlan_triggers);
 		bss->wowlan_triggers = os_strdup(pos);
@@ -4354,6 +4462,7 @@ static int hostapd_config_fill(struct ho
 
 		os_strlcpy(conf->fst_cfg.group_id, pos,
 			   sizeof(conf->fst_cfg.group_id));
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "fst_priority") == 0) {
 		char *endp;
 		long int val;
@@ -4373,6 +4482,7 @@ static int hostapd_config_fill(struct ho
 			return 1;
 		}
 		conf->fst_cfg.priority = (u8) val;
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "fst_llt") == 0) {
 		char *endp;
 		long int val;
@@ -4392,11 +4502,14 @@ static int hostapd_config_fill(struct ho
 			return 1;
 		}
 		conf->fst_cfg.llt = (u32) val;
+			conf->conf_changed = 1;
 #endif /* CONFIG_FST */
 	} else if (os_strcmp(buf, "track_sta_max_num") == 0) {
 		conf->track_sta_max_num = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "track_sta_max_age") == 0) {
 		conf->track_sta_max_age = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "no_probe_resp_if_seen_on") == 0) {
 		os_free(bss->no_probe_resp_if_seen_on);
 		bss->no_probe_resp_if_seen_on = os_strdup(pos);
@@ -4410,6 +4523,7 @@ static int hostapd_config_fill(struct ho
 			wpabuf_free(conf->lci);
 			conf->lci = NULL;
 		}
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "civic") == 0) {
 		wpabuf_free(conf->civic);
 		conf->civic = wpabuf_parse_bin(pos);
@@ -4417,6 +4531,7 @@ static int hostapd_config_fill(struct ho
 			wpabuf_free(conf->civic);
 			conf->civic = NULL;
 		}
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "rrm_neighbor_report") == 0) {
 		if (atoi(pos))
 			bss->radio_measurements[0] |=
@@ -4431,6 +4546,7 @@ static int hostapd_config_fill(struct ho
 		bss->gas_address3 = atoi(pos);
 	} else if (os_strcmp(buf, "stationary_ap") == 0) {
 		conf->stationary_ap = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "ftm_responder") == 0) {
 		bss->ftm_responder = atoi(pos);
 	} else if (os_strcmp(buf, "ftm_initiator") == 0) {
@@ -4559,10 +4675,13 @@ static int hostapd_config_fill(struct ho
 		bss->multi_ap = val;
 	} else if (os_strcmp(buf, "rssi_reject_assoc_rssi") == 0) {
 		conf->rssi_reject_assoc_rssi = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "rssi_reject_assoc_timeout") == 0) {
 		conf->rssi_reject_assoc_timeout = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "rssi_ignore_probe_request") == 0) {
 		conf->rssi_ignore_probe_request = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "pbss") == 0) {
 		bss->pbss = atoi(pos);
 	} else if (os_strcmp(buf, "transition_disable") == 0) {
@@ -4577,8 +4696,10 @@ static int hostapd_config_fill(struct ho
 			return 1;
 		}
 		conf->airtime_mode = val;
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "airtime_update_interval") == 0) {
 		conf->airtime_update_interval = atoi(pos);
+		conf->conf_changed = 1;
 	} else if (os_strcmp(buf, "airtime_bss_weight") == 0) {
 		bss->airtime_weight = atoi(pos);
 	} else if (os_strcmp(buf, "airtime_bss_limit") == 0) {
@@ -4820,6 +4941,7 @@ struct hostapd_config * hostapd_config_r
 		pos++;
 		errors += hostapd_config_fill(conf, bss, buf, pos, line);
 	}
+	conf->conf_changed = 0;
 
 	fclose(f);
 
@@ -4863,6 +4985,10 @@ int hostapd_set_iface(struct hostapd_con
 		wpa_printf(MSG_ERROR, "Configuration check failed");
 		return -1;
 	}
+	if (conf->conf_changed) {
+		conf->conf_changed = 0;
+		conf->reload_all_needed = 1;
+	}
 
 	return 0;
 }
Index: hostapd-2022-05-08-b859b9bc/hostapd/ctrl_iface.c
===================================================================
--- hostapd-2022-05-08-b859b9bc.orig/hostapd/ctrl_iface.c
+++ hostapd-2022-05-08-b859b9bc/hostapd/ctrl_iface.c
@@ -1411,9 +1411,9 @@ static int hostapd_ctrl_iface_enable(str
 }
 
 
-static int hostapd_ctrl_iface_reload(struct hostapd_iface *iface)
+static int hostapd_ctrl_iface_reload(struct hostapd_iface *iface, struct hostapd_data * hapd)
 {
-	if (hostapd_reload_iface(iface) < 0) {
+	if (hostapd_reload_iface(iface, hapd) < 0) {
 		wpa_printf(MSG_ERROR, "Reloading of interface failed");
 		return -1;
 	}
@@ -3417,7 +3417,7 @@ static int hostapd_ctrl_iface_receive_pr
 		if (hostapd_ctrl_iface_reload_wpa_psk(hapd))
 			reply_len = -1;
 	} else if (os_strncmp(buf, "RELOAD", 6) == 0) {
-		if (hostapd_ctrl_iface_reload(hapd->iface))
+		if (hostapd_ctrl_iface_reload(hapd->iface, hapd))
 			reply_len = -1;
 	} else if (os_strncmp(buf, "DISABLE", 7) == 0) {
 		if (hostapd_ctrl_iface_disable(hapd->iface))
Index: hostapd-2022-05-08-b859b9bc/src/ap/ap_config.c
===================================================================
--- hostapd-2022-05-08-b859b9bc.orig/src/ap/ap_config.c
+++ hostapd-2022-05-08-b859b9bc/src/ap/ap_config.c
@@ -292,6 +292,8 @@ struct hostapd_config * hostapd_config_d
 #ifdef CONFIG_AIRTIME_POLICY
 	conf->airtime_update_interval = AIRTIME_DEFAULT_UPDATE_INTERVAL;
 #endif /* CONFIG_AIRTIME_POLICY */
+	conf->conf_changed = 0;
+	conf->reload_all_needed = 0;
 
 	return conf;
 }
Index: hostapd-2022-05-08-b859b9bc/src/ap/ap_config.h
===================================================================
--- hostapd-2022-05-08-b859b9bc.orig/src/ap/ap_config.h
+++ hostapd-2022-05-08-b859b9bc/src/ap/ap_config.h
@@ -1149,6 +1149,8 @@ struct hostapd_config {
 #define CH_SWITCH_EHT_ENABLED BIT(0)
 #define CH_SWITCH_EHT_DISABLED BIT(1)
 	unsigned int ch_switch_eht_config;
+	unsigned char conf_changed;
+	unsigned char reload_all_needed;
 };
 
 
Index: hostapd-2022-05-08-b859b9bc/src/ap/hostapd.c
===================================================================
--- hostapd-2022-05-08-b859b9bc.orig/src/ap/hostapd.c
+++ hostapd-2022-05-08-b859b9bc/src/ap/hostapd.c
@@ -194,6 +194,19 @@ static void hostapd_reload_bss(struct ho
 	wpa_printf(MSG_DEBUG, "Reconfigured interface %s", hapd->conf->iface);
 }
 
+static void hostapd_clear_old_by_bss(struct hostapd_data *hapd)
+{
+	hostapd_flush_old_stations(hapd, WLAN_REASON_PREV_AUTH_NOT_VALID);
+#ifdef CONFIG_WEP
+	hostapd_broadcast_wep_clear(hapd);
+#endif /* CONFIG_WEP */
+
+#ifndef CONFIG_NO_RADIUS
+	/* TODO: update dynamic data based on changed configuration
+	 * items (e.g., open/close sockets, etc.) */
+	radius_client_flush(hapd->radius, 0);
+#endif /* CONFIG_NO_RADIUS */
+}
 
 static void hostapd_clear_old(struct hostapd_iface *iface)
 {
@@ -2866,22 +2879,30 @@ int hostapd_enable_iface(struct hostapd_
 }
 
 
-int hostapd_reload_iface(struct hostapd_iface *hapd_iface)
+int hostapd_reload_iface(struct hostapd_iface *hapd_iface, struct hostapd_data* hapd)
 {
 	size_t j;
 
 	wpa_printf(MSG_DEBUG, "Reload interface %s",
 		   hapd_iface->conf->bss[0]->iface);
-	for (j = 0; j < hapd_iface->num_bss; j++)
-		hostapd_set_security_params(hapd_iface->conf->bss[j], 1);
+	for (j = 0; j < hapd_iface->num_bss; j++) {
+		if (hapd_iface->bss[j] == hapd)
+			hostapd_set_security_params(hapd_iface->conf->bss[j], 1);
+	}
+
 	if (hostapd_config_check(hapd_iface->conf, 1) < 0) {
 		wpa_printf(MSG_ERROR, "Updated configuration is invalid");
 		return -1;
 	}
-	hostapd_clear_old(hapd_iface);
-	for (j = 0; j < hapd_iface->num_bss; j++)
-		hostapd_reload_bss(hapd_iface->bss[j]);
-
+	if (hapd_iface->conf->reload_all_needed) { //itf config change, need reload all bss
+		hostapd_clear_old(hapd_iface);
+		for (j = 0; j < hapd_iface->num_bss; j++)
+			hostapd_reload_bss(hapd_iface->bss[j]);
+		hapd_iface->conf->reload_all_needed = 0;
+	} else {
+		hostapd_clear_old_by_bss(hapd);
+		hostapd_reload_bss(hapd);
+	}
 	return 0;
 }
 
Index: hostapd-2022-05-08-b859b9bc/src/ap/hostapd.h
===================================================================
--- hostapd-2022-05-08-b859b9bc.orig/src/ap/hostapd.h
+++ hostapd-2022-05-08-b859b9bc/src/ap/hostapd.h
@@ -675,7 +675,7 @@ void hostapd_new_assoc_sta(struct hostap
 			   int reassoc);
 void hostapd_interface_deinit_free(struct hostapd_iface *iface);
 int hostapd_enable_iface(struct hostapd_iface *hapd_iface);
-int hostapd_reload_iface(struct hostapd_iface *hapd_iface);
+int hostapd_reload_iface(struct hostapd_iface *hapd_iface, struct hostapd_data* hapd);
 int hostapd_disable_iface(struct hostapd_iface *hapd_iface);
 void hostapd_bss_deinit_no_free(struct hostapd_data *hapd);
 void hostapd_free_hapd_data(struct hostapd_data *hapd);
