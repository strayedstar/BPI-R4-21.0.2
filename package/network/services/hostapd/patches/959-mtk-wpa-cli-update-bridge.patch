diff --git a/wpa_supplicant/ctrl_iface.c b/wpa_supplicant/ctrl_iface.c
index 65fc6d1..320a1dc 100644
--- a/wpa_supplicant/ctrl_iface.c
+++ b/wpa_supplicant/ctrl_iface.c
@@ -3291,6 +3291,25 @@ static int wpa_supplicant_ctrl_iface_mesh_group_add(
 	return 0;
 }
 
+#ifdef CONFIG_MTK_MAP
+static int wpa_supplicant_ctrl_iface_update_bridge(
+	struct wpa_supplicant *wpa_s, char *cmd)
+{
+	char bridge_ifname[16] = "";
+
+	wpa_printf(MSG_DEBUG, "CTRL_IFACE: UPDATE_BRIDGE bride name=%s", cmd);
+
+	if (os_strlen(cmd) > 0) {
+		os_memcpy(bridge_ifname, cmd, os_strlen(cmd));
+		if (wpa_supplicant_update_bridge_ifname(wpa_s, (const char *)bridge_ifname) < 0)
+			return -1;
+	} else {
+		if (wpa_supplicant_update_bridge_ifname(wpa_s, NULL) < 0)
+			return -1;
+	}
+	return 0;
+}
+#endif /* CONFIG_MTK_MAP */
 
 static int wpa_supplicant_ctrl_iface_mesh_group_remove(
 	struct wpa_supplicant *wpa_s, char *cmd)
@@ -12648,6 +12667,10 @@ char * wpa_supplicant_ctrl_iface_process(struct wpa_supplicant *wpa_s,
 	} else if (os_strncmp(buf, "WPS_DPP_URI ", 12) == 0) {
 		if (wpas_ctrl_iface_set_wps_dpp_uri(wpa_s, buf + 12))
 			reply_len = -1;
+	} else if (os_strncmp(buf, "UPDATE_BRIDGE ", 5) == 0) {
+		if (wpa_supplicant_ctrl_iface_update_bridge(wpa_s,
+							buf + 14) < 0)
+			reply_len = -1;
 #endif /* CONFIG_MTK_MAP */
 	} else {
 		os_memcpy(reply, "UNKNOWN COMMAND\n", 16);
diff --git a/wpa_supplicant/wpa_cli.c b/wpa_supplicant/wpa_cli.c
index b196246..daa2a8c 100644
--- a/wpa_supplicant/wpa_cli.c
+++ b/wpa_supplicant/wpa_cli.c
@@ -3315,6 +3315,12 @@ static int wpa_cli_cmd_dscp_query(struct wpa_ctrl *ctrl, int argc, char *argv[])
 	return wpa_cli_cmd(ctrl, "DSCP_QUERY", 1, argc, argv);
 }
 
+#ifdef CONFIG_MTK_MAP
+static int wpa_cli_cmd_update_bridge(struct wpa_ctrl *ctrl, int argc, char *argv[])
+{
+	return wpa_cli_cmd(ctrl, "UPDATE_BRIDGE", 1, argc, argv);
+}
+#endif /* CONFIG_MTK_MAP */
 
 enum wpa_cli_cmd_flags {
 	cli_cmd_flag_none		= 0x00,
@@ -4057,6 +4063,11 @@ static const struct wpa_cli_cmd wpa_cli_commands[] = {
 	{ "dscp_query", wpa_cli_cmd_dscp_query, NULL,
 	  cli_cmd_flag_none,
 	  "wildcard/domain_name=<string> = Send DSCP Query" },
+#ifdef CONFIG_MTK_MAP
+	{ "update_bridge", wpa_cli_cmd_update_bridge, NULL,
+	  cli_cmd_flag_none,
+	  "<bridge_name> = bridge name add/remove to interface" },
+#endif /* CONFIG_MTK_MAP */
 	{ NULL, NULL, NULL, cli_cmd_flag_none, NULL }
 };
 
