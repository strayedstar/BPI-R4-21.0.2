Index: hostapd-2022-07-29-b704dc72/src/ap/wpa_auth_ft.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/ap/wpa_auth_ft.c
+++ hostapd-2022-07-29-b704dc72/src/ap/wpa_auth_ft.c
@@ -2849,11 +2849,15 @@ u8 * wpa_sm_write_assoc_resp_ies(struct
 	struct wpa_auth_config *conf;
 	struct wpa_ft_ies parse;
 	u8 *ric_start;
+	size_t ric_len = 0;
 	u8 *anonce, *snonce;
 	const u8 *kck;
 	size_t kck_len;
 	size_t key_len;
 	int use_sha384;
+#ifdef	CONFIG_IEEE80211R_AP
+	struct wpa_ml_group *ml_group = NULL;
+#endif
 
 	if (sm == NULL)
 		return pos;
@@ -2934,10 +2938,9 @@ u8 * wpa_sm_write_assoc_resp_ies(struct
 
 	/* Fast BSS Transition Information */
 	if (auth_alg == WLAN_AUTH_FT) {
-#ifdef	CONFIG_IEEE80211R_AP
+#ifdef	CONFIG_MTK_IEEE80211BE
 		if (sm->dot11MultiLinkActivated) {
 			int i;
-			struct wpa_ml_group *ml_group = NULL;
 			struct wpa_ml_link *link;
 
 			ml_group = STATE_MACHINE_ML_GROUP;
@@ -3193,8 +3196,15 @@ u8 * wpa_sm_write_assoc_resp_ies(struct
 		fte_mic = _ftie->mic;
 		elem_count = &_ftie->mic_control[1];
 	}
+#ifdef	CONFIG_MTK_IEEE80211BE
+	if (auth_alg == WLAN_AUTH_FT && sm->dot11MultiLinkActivated)
+		*elem_count = 2 + ml_group->ml_link_num;
+#else
 	if (auth_alg == WLAN_AUTH_FT)
 		*elem_count = 3; /* Information element count */
+#endif
+
+	wpa_printf(MSG_DEBUG, "11 elem_count = %d", *elem_count );
 
 	ric_start = pos;
 	if (wpa_ft_parse_ies(req_ies, req_ies_len, &parse, use_sha384) == 0
@@ -3208,6 +3218,8 @@ u8 * wpa_sm_write_assoc_resp_ies(struct
 	}
 	if (ric_start == pos)
 		ric_start = NULL;
+	else
+		ric_len = pos - ric_start;
 
 	if (omit_rsnxe) {
 		rsnxe_len = 0;
@@ -3227,8 +3239,13 @@ u8 * wpa_sm_write_assoc_resp_ies(struct
 		rsnxe_len = sm->wpa_auth->conf.rsnxe_override_ft_len;
 	}
 #endif /* CONFIG_TESTING_OPTIONS */
+#ifdef	CONFIG_MTK_IEEE80211BE
+	if (auth_alg == WLAN_AUTH_FT && rsnxe_len && sm->dot11MultiLinkActivated)
+		*elem_count += ml_group->ml_link_num;
+#else
 	if (auth_alg == WLAN_AUTH_FT && rsnxe_len)
 		*elem_count += 1;
+#endif
 
 #if 0
 #ifdef CONFIG_MTK_IEEE80211BE
@@ -3253,8 +3270,30 @@ u8 * wpa_sm_write_assoc_resp_ies(struct
 
 #ifdef CONFIG_MTK_IEEE80211BE
 	if (ftie_len > 257) {
+		size_t rem_len;
+		u8 *rem_ie;
+		int i;
+
 		wpa_printf(MSG_DEBUG, "FTE is larger than 255, set FTE length to 255 to calculate MIC");
 		ftie[1] = 255;
+		rem_len = ftie_len - (2 + 255) + ric_len;
+		/* Insert Fragment Id and Length */
+		rem_ie = os_malloc(rem_len);
+		if (!rem_ie)
+			return NULL;
+		os_memcpy(rem_ie, ftie + 257, rem_len);
+		wpa_hexdump(MSG_DEBUG, "rem_ie",
+						rem_ie, rem_len);
+		ftie[257] = WLAN_EID_FRAGMENT;
+		ftie[258] = rem_len;
+		os_memcpy(ftie + 259, rem_ie, rem_len);
+		ftie_len += 2;
+		pos += 2;
+		if (ric_start)
+			ric_start += 2;
+
+		wpa_hexdump(MSG_DEBUG, "After Fragment FT: ftie",
+							ftie, ftie_len);
 	}
 #endif
 
@@ -3267,7 +3306,7 @@ u8 * wpa_sm_write_assoc_resp_ies(struct
 #ifdef CONFIG_MTK_IEEE80211BE
 			   parse.mlie ? parse.mlie : NULL,
 			   parse.mlie ? parse.mlie_len : 0,
-			   sm->wpa_auth->addr,
+			   sm->wpa_auth->addr, 1, hapd->ml_group,
 #endif
 		       fte_mic) < 0) {
 		wpa_printf(MSG_DEBUG, "FT: Failed to calculate MIC");
@@ -3275,29 +3314,11 @@ u8 * wpa_sm_write_assoc_resp_ies(struct
 	}
 
 	os_free(sm->assoc_resp_ftie);
+	sm->assoc_resp_ftie = os_malloc(ftie_len);
+	if (!sm->assoc_resp_ftie)
+		return NULL;
+	os_memcpy(sm->assoc_resp_ftie, ftie, ftie_len);
 
-	if (ftie_len <= 257) {
-		sm->assoc_resp_ftie = os_malloc(ftie_len);
-		if (!sm->assoc_resp_ftie)
-			return NULL;
-		os_memcpy(sm->assoc_resp_ftie, ftie, ftie_len);
-	} else {
-		size_t rem_len;
-
-		wpa_printf(MSG_DEBUG, "FT: need to do fragment for ftie");
-		sm->assoc_resp_ftie = os_malloc(ftie_len + 2);
-		if (!sm->assoc_resp_ftie)
-			return NULL;
-
-		ftie[1] = 255;
-		os_memcpy(sm->assoc_resp_ftie, ftie, 2 + 255);
-
-		rem_len = ftie_len - (2 + 255);
-
-		sm->assoc_resp_ftie[257] = WLAN_EID_FRAGMENT;
-		sm->assoc_resp_ftie[258] = rem_len;
-		os_memcpy(sm->assoc_resp_ftie + 259, ftie + 257, rem_len);
-	}
 	return pos;
 }
 
@@ -4046,7 +4067,7 @@ int wpa_ft_validate_reassoc(struct wpa_s
 #ifdef CONFIG_MTK_IEEE80211BE
 			   parse.mlie ? parse.mlie : NULL,
 			   parse.mlie ? parse.mlie_len : 0,
-			   sm->addr,
+			   sm->addr, 0, NULL,
 #endif
 		       mic) < 0) {
 		wpa_printf(MSG_DEBUG, "FT: Failed to calculate MIC");
Index: hostapd-2022-07-29-b704dc72/src/common/wpa_common.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/common/wpa_common.c
+++ hostapd-2022-07-29-b704dc72/src/common/wpa_common.c
@@ -23,6 +23,9 @@
 #ifdef CONFIG_MTK_IEEE80211BE
 #include "ml/ml_common.h"
 #include "common/ieee802_11_common.h"
+#include "ap/hostapd.h"
+#include "ap/wpa_auth_ie.h"
+#include "ap/wpa_auth_i.h"
 #endif /* CONFIG_MTK_IEEE80211BE */
 
 
@@ -887,6 +890,29 @@ int fils_key_auth_sk(const u8 *ick, size
 
 
 #ifdef CONFIG_IEEE80211R
+int each_link_rsne_equal(const u8 **link_rsne,
+		size_t *link_rsne_len, size_t ml_link_num)
+{
+	size_t i, j;
+
+	for (i = 0; i < ml_link_num; i++) {
+		for (j = i; j < ml_link_num; j++) {
+			if (link_rsne_len[i] != link_rsne_len[j])
+				return 0;
+		}
+	}
+
+	for (i = 0; i < ml_link_num; i++) {
+		for (j = i; j < ml_link_num; j++) {
+			if (os_memcmp(link_rsne[i], link_rsne[j], link_rsne_len[i]) != 0)
+				return 0;
+		}
+	}
+
+	return 1;
+}
+
+
 int wpa_ft_mic(int key_mgmt, const u8 *kck, size_t kck_len, const u8 *sta_addr,
 	       const u8 *ap_addr, u8 transaction_seqnum,
 	       const u8 *mdie, size_t mdie_len,
@@ -896,6 +922,7 @@ int wpa_ft_mic(int key_mgmt, const u8 *k
 	       const u8 *rsnxe, size_t rsnxe_len,
 #ifdef CONFIG_MTK_IEEE80211BE
 		   const u8 *mlie, size_t mlie_len, const u8 *main_link_addr,
+		   u8 tx_reassoc_rsp, struct wpa_ml_group *ml_group,
 #endif
 	       u8 *mic)
 {
@@ -909,6 +936,7 @@ int wpa_ft_mic(int key_mgmt, const u8 *k
 	size_t link_rsne_len[MAX_NUM_MLO_LINKS] = {0};
 	const u8 *link_rsnxe[MAX_NUM_MLO_LINKS] = {0};
 	size_t link_rsnxe_len[MAX_NUM_MLO_LINKS] = {0};
+	struct wpa_ml_link *link;
 #else /* CONFIG_MTK_IEEE80211BE */
 	const u8 *addr[10];
 	size_t len[10];
@@ -930,39 +958,90 @@ int wpa_ft_mic(int key_mgmt, const u8 *k
 			link_rsnxe[ml_info.link_id] = rsnxe;
 			link_rsnxe_len[ml_info.link_id] = rsnxe_len;
 
-			for (i = 0; i < ml_info.prof_num; i++) {
-				struct ieee802_11_elems elems;
-				u8 link_id = ml_info.profiles[i].link_id;
-
-				valid_links |= BIT(link_id);
-				link_addr[link_id] = ml_info.profiles[i].addr;
-				link_rsne[link_id] = rsnie;
-				link_rsne_len[link_id] = rsnie_len;
-				link_rsnxe[link_id] = rsnxe;
-				link_rsnxe_len[link_id] = rsnxe_len;
-
-				if (elems.rsn_ie && elems.rsn_ie_len > 0) {
-					wpa_printf(MSG_INFO,
-						"FT: Link%d replace rsne", link_id);
-					link_rsne[link_id] = elems.rsn_ie - 2;
-					link_rsne_len[link_id] = elems.rsn_ie_len + 2;
-				}
-				if (elems.rsnxe && elems.rsnxe_len > 0) {
-					wpa_printf(MSG_INFO,
-						"FT: Link%d replace rsnxe", link_id);
-					link_rsnxe[link_id] = elems.rsnxe - 2;
-					link_rsnxe_len[link_id] = elems.rsnxe_len + 2;
+			if (!tx_reassoc_rsp) {
+				for (i = 0; i < ml_info.prof_num; i++) {
+					struct ieee802_11_elems elems;
+					u8 link_id = ml_info.profiles[i].link_id;
+
+					valid_links |= BIT(link_id);
+					link_addr[link_id] = ml_info.profiles[i].addr;
+					link_rsne[link_id] = rsnie;
+					link_rsne_len[link_id] = rsnie_len;
+					link_rsnxe[link_id] = rsnxe;
+					link_rsnxe_len[link_id] = rsnxe_len;
+
+					if (elems.rsn_ie && elems.rsn_ie_len > 0) {
+						wpa_printf(MSG_INFO,
+							"FT: Link%d replace rsne", link_id);
+						link_rsne[link_id] = elems.rsn_ie - 2;
+						link_rsne_len[link_id] = elems.rsn_ie_len + 2;
+					}
+					if (elems.rsnxe && elems.rsnxe_len > 0) {
+						wpa_printf(MSG_INFO,
+							"FT: Link%d replace rsnxe", link_id);
+						link_rsnxe[link_id] = elems.rsnxe - 2;
+						link_rsnxe_len[link_id] = elems.rsnxe_len + 2;
+					}
 				}
-			}
 
-		}
+				/* fourth message, no need to add legacy rsn */
+				if (ml_info.bss_para_change_cnt_present)
+					need_ml_rsn = 1;
+
+				wpa_printf(MSG_INFO, "FT: MLO valid links=%x, need_ml_rsn=%d",
+					valid_links, need_ml_rsn);
+			} else if (ml_group) {
+				for (i = 0; i < ml_group->ml_link_num; i++) {
+					struct wpa_authenticator *auth;
+
+					//ml_group = hapd->ml_group;
+					link = &ml_group->links[i];
+					auth = ((struct hostapd_data *)link->ctx)->wpa_auth;
+					if (!auth) {
+						wpa_printf(MSG_ERROR,
+							"ML: wpa_auth is NULL--link_id=%d, link_addr=" MACSTR "",
+							link->link_id, MAC2STR(link->addr));
+						return -1;
+					}
+					link_rsne[i] = get_ie(auth->wpa_ie, auth->wpa_ie_len, WLAN_EID_RSN);
+					link_rsne_len[i] = link_rsne[i] ? link_rsne[i][1] + 2 : 0;
+					link_rsnxe[i] = get_ie(auth->wpa_ie, auth->wpa_ie_len, WLAN_EID_RSNX);
+					link_rsnxe_len[i] = link_rsnxe[i] ? link_rsnxe[i][1] + 2 : 0;
+					link_addr[i] = link->addr;
+
+					wpa_hexdump(MSG_DEBUG, "FT: tx_reassoc_rsp rsne",
+							link_rsne[i], link_rsne_len[i]);
+					wpa_hexdump(MSG_DEBUG, "FT: tx_reassoc_rsp rsxe",
+							link_rsnxe[i], link_rsnxe_len[i]);
+					wpa_hexdump(MSG_DEBUG, "FT: tx_reassoc_rsp link_addr",
+							link_addr[i], ETH_ALEN);
+				}
 
-		/* fourth message, no need to add legacy rsn */
-		if (ml_info.bss_para_change_cnt_present)
-			need_ml_rsn = 1;
+				if (ml_group->ml_link_num > 1)
+					need_ml_rsn = 1;
 
-		wpa_printf(MSG_INFO, "FT: MLO valid links=%x, need_ml_rsn=%d",
-			valid_links, need_ml_rsn);
+				wpa_printf(MSG_INFO, "FT: MLO valid links=%x, need_ml_rsn=%d for tx_reassoc_rsp",
+					valid_links, need_ml_rsn);
+				wpa_printf(MSG_INFO, "FT: ml_group->ml_link_num = %ld. xxabc",
+					ml_group->ml_link_num);
+
+				if (need_ml_rsn) {
+					if (each_link_rsne_equal(link_rsne, link_rsne_len, ml_group->ml_link_num)) {
+						for (i = 0; i < ml_group->ml_link_num; i++) {
+							link_rsne[i] = rsnie;
+							link_rsne_len[i] = rsnie_len;
+							wpa_hexdump(MSG_DEBUG, "FT: tx_reassoc_rsp rsne append PMKID & PMKLIST",
+								link_rsne[i], link_rsne_len[i]);
+						}
+					} else {
+						link_rsne[ml_info.link_id] = rsnie;
+						link_rsne_len[ml_info.link_id] = rsnie_len;
+						wpa_hexdump(MSG_DEBUG, "FT: tx_reassoc_rsp mai link rsne append PMKID & PMKLIST",
+								link_rsne[ml_info.link_id], link_rsne_len[ml_info.link_id]);
+					}
+				}
+			}
+		}
 	}
 #endif
 
@@ -1003,7 +1082,7 @@ int wpa_ft_mic(int key_mgmt, const u8 *k
 	}
 
 #ifdef CONFIG_MTK_IEEE80211BE
-	if (need_ml_rsn) {
+	if (need_ml_rsn && !tx_reassoc_rsp) {
 		for (i = 0; i < MAX_NUM_MLO_LINKS; i++) {
 			if (valid_links & BIT(i)) {
 				addr[num_elem] = link_rsne[i];
@@ -1011,6 +1090,12 @@ int wpa_ft_mic(int key_mgmt, const u8 *k
 				num_elem++;
 			}
 		}
+	} else if (need_ml_rsn && tx_reassoc_rsp && ml_group) {
+		for (i = 0; i < ml_group->ml_link_num; i++) {
+			addr[num_elem] = link_rsne[i];
+			len[num_elem] = link_rsne_len[i];
+			num_elem++;
+		}
 	}
 #endif
 
@@ -1052,7 +1137,7 @@ int wpa_ft_mic(int key_mgmt, const u8 *k
 	}
 
 #ifdef CONFIG_MTK_IEEE80211BE
-	if (need_ml_rsn) {
+	if (need_ml_rsn && !tx_reassoc_rsp) {
 		for (i = 0; i < MAX_NUM_MLO_LINKS; i++) {
 			if (valid_links & BIT(i)) {
 				addr[num_elem] = link_rsnxe[i];
@@ -1060,12 +1145,27 @@ int wpa_ft_mic(int key_mgmt, const u8 *k
 				num_elem++;
 			}
 		}
+	} else if (need_ml_rsn && tx_reassoc_rsp && ml_group) {
+		for (i = 0; i < ml_group->ml_link_num; i++) {
+			addr[num_elem] = link_rsnxe[i];
+			len[num_elem] = link_rsnxe_len[i];
+			num_elem++;
+		}
 	}
 
 	if (mlie) {
-		for (i = 0; i < MAX_NUM_MLO_LINKS; i++) {
-			if (valid_links & BIT(i)) {
-				wpa_printf(MSG_INFO, "FT: link addr");
+		if (!tx_reassoc_rsp) {
+			for (i = 0; i < MAX_NUM_MLO_LINKS; i++) {
+				if (valid_links & BIT(i)) {
+					wpa_printf(MSG_INFO, "FT: link addr");
+					addr[num_elem] = link_addr[i];
+					len[num_elem] = ETH_ALEN;
+					num_elem++;
+				}
+			}
+		} else {
+			for (i = 0; i < ml_group->ml_link_num; i++) {
+				wpa_printf(MSG_INFO, "FT: link addr for tx_reassoc_rsp");
 				addr[num_elem] = link_addr[i];
 				len[num_elem] = ETH_ALEN;
 				num_elem++;
Index: hostapd-2022-07-29-b704dc72/src/common/wpa_common.h
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/common/wpa_common.h
+++ hostapd-2022-07-29-b704dc72/src/common/wpa_common.h
@@ -248,6 +248,23 @@ struct wpa_eapol_key {
 #define WPA_PASN_KCK_LEN 32
 #define WPA_PASN_MIC_MAX_LEN 24
 
+struct wpa_ml_link {
+	u8 link_id;
+	u8 addr[ETH_ALEN];
+
+	void *ctx;
+};
+
+struct wpa_ml_group {
+	void *ctx;
+	u8 ml_addr[ETH_ALEN];
+	u8 ml_group_id;
+	size_t ml_link_num;
+
+	struct wpa_ml_link *links;
+};
+
+
 /**
  * struct wpa_ptk - WPA Pairwise Transient Key
  * IEEE Std 802.11i-2004 - 8.5.1.2 Pairwise key hierarchy
@@ -452,7 +469,10 @@ int wpa_ft_mic(int key_mgmt, const u8 *k
 	       const u8 *ric, size_t ric_len,
 	       const u8 *rsnxe, size_t rsnxe_len,
 #ifdef CONFIG_MTK_IEEE80211BE
-		   const u8 *mlie, size_t mlie_len, const u8 *main_link_addr,
+		   const u8 *mlie, size_t mlie_len,
+		   const u8 *main_link_addr, 
+		   u8 tx_reassoc_rsp,
+		   struct wpa_ml_group *ml_group,
 #endif
 	       u8 *mic);
 int wpa_derive_pmk_r0(const u8 *xxkey, size_t xxkey_len,
Index: hostapd-2022-07-29-b704dc72/src/ml/ml_common.h
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/ml/ml_common.h
+++ hostapd-2022-07-29-b704dc72/src/ml/ml_common.h
@@ -143,21 +143,6 @@ struct wpa_mlo_link_kde {
 	u8 var[]; /* RSNE | RSNXE */
 } STRUCT_PACKED;
 
-struct wpa_ml_link {
-	u8 link_id;
-	u8 addr[ETH_ALEN];
-
-	void *ctx;
-};
-
-struct wpa_ml_group {
-	void *ctx;
-	u8 ml_addr[ETH_ALEN];
-	u8 ml_group_id;
-	size_t ml_link_num;
-
-	struct wpa_ml_link *links;
-};
 
 struct per_sta_profile {
 	u8 link_id;
Index: hostapd-2022-07-29-b704dc72/src/rsn_supp/wpa_ft.c
===================================================================
--- hostapd-2022-07-29-b704dc72.orig/src/rsn_supp/wpa_ft.c
+++ hostapd-2022-07-29-b704dc72/src/rsn_supp/wpa_ft.c
@@ -440,6 +440,8 @@ static u8 * wpa_ft_gen_req_ies(struct wp
 				   NULL,
 				   0,
 				   NULL,
+				   0,
+				   NULL,
 #endif
 			       fte_mic) < 0) {
 			wpa_printf(MSG_INFO, "FT: Failed to calculate MIC");
@@ -1139,7 +1141,7 @@ int wpa_ft_validate_reassoc_resp(struct
 #ifdef CONFIG_MTK_IEEE80211BE
 			   parse.mlie ? parse.mlie: NULL,
 			   parse.mlie ? parse.mlie_len : 0,
-			   src_addr,
+			   src_addr, 0, NULL,
 #endif
 		       mic) < 0) {
 		wpa_printf(MSG_DEBUG, "FT: Failed to calculate MIC");
